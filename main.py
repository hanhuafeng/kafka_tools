# -*- coding: utf-8 -*-
# ! /usr/bin/env python
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 04, 2019 04:01:04 PM +0800  platform: Windows NT

import sys
import tkinter as TK
import main_support
from tkinter import messagebox

from Consummer import Consummer
from HistoryMsgFrame import HistoryMsgFrame
from Producer import Producer
import threading
import os
import sys
import webbrowser

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import sqlite3
import platform

w = None
consummer = None


def vp_start_gui():
    """
    Starting point when module is the main routine.
    :return: 
    """""
    global val, w, root
    root = tk.Tk()
    # sys_type = platform.system()
    # print(sys_type)
    # root.iconbitmap(os.path.join(os.path.dirname(sys.argv[0]), "icon.ico"))
    main_support.set_Tk_var()
    top = Toplevel1(root)
    main_support.init(root, top)
    root.mainloop()


def create_Toplevel1(root, *args, **kwargs):
    """
    Starting point when module is imported by another program.
    :param root:
    :param args:
    :param kwargs:
    :return:
    """
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    main_support.set_Tk_var()
    top = Toplevel1(w)
    main_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    """
    销毁顶层窗口
    :return:
    """
    global w
    w.destroy()
    w = None


def thread_it(func, *args):
    '''将函数打包进线程'''
    # 创建
    consummer_thread = threading.Thread(target=func, args=args)
    # 守护 !!!
    consummer_thread.setDaemon(True)
    # 启动
    consummer_thread.start()
    # 阻塞--卡死界面！
    # t.join()


def readInit():
    """
    配置初始化
    :return:
    """
    # 如果db文件不存在则创建
    # if not os.path.exists(os.path.join(os.path.dirname(sys.argv[0]), "kafka_info.db")):
    conn = sqlite3.connect(os.path.join(os.path.dirname(sys.argv[0]), "kafka_info.db"))
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS INFO
                    (
                        ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                        IP     TEXT    NOT NULL,
                        PORT    TEXT   NOT NULL,
                        TOPIC   TEXT   NOT NULL,
                        GROUP_ID TEXT
                    );'''
              )
    c.execute('''
                create table IF NOT EXISTS history_msg
        (
            col_key            varchar(255),
            topic          varchar(255),
            partition      varchar(255),
            offset         varchar(255),
            timestamp_str      varchar(255),
            timestamp_type varchar(255),
            value          text
        );
    ''')
    conn.commit()
    conn.close()
    try:
        conn = sqlite3.connect(os.path.join(os.path.dirname(sys.argv[0]), "kafka_info.db"))
        c = conn.cursor()
        # 尝试创建索引，因为索引无法重复创建，所以这里会报错，但是不影响程序运行
        c.execute("CREATE UNIQUE INDEX history_msg_uk ON history_msg (col_key,topic,partition,offset);")
        conn.commit()
        conn.close()
    except Exception as e:
        print(e)
    # 测试连接数据库，没有会自动创建文件，数据结构还是要上面定义
    conn = sqlite3.connect(os.path.join(os.path.dirname(sys.argv[0]), "kafka_info.db"))
    c = conn.cursor()
    # 首先查询表中所有数据
    c.execute("select * from INFO;")
    res = c.fetchall()
    # 添加数据
    conn.commit()
    c.close()
    conn.close()
    return res


def addNewDataInDb(ip, port, topic, groupId):
    if ip is None or ip == '' or port is None or port == '' or topic is None or topic == '':
        messagebox.showinfo("错误", "有值为空")
        return
    sql = 'select * from INFO where ip = \'' + ip + '\' and port = \'' + port + '\' and topic = \'' + topic + '\''
    conn = sqlite3.connect(os.path.join(os.path.dirname(sys.argv[0]), "kafka_info.db"))
    c = conn.cursor()
    c.execute(sql)
    res = c.fetchall()
    if res is None or len(res) == 0:
        if groupId is None or groupId == '':
            sql = "insert into INFO(IP,PORT,TOPIC) values ('{}','{}','{}')".format(ip, port, topic)
        else:
            sql = "insert into INFO(IP,PORT,TOPIC,GROUP_ID) values ('{}','{}','{}','{}')".format(ip, port, topic,
                                                                                                 groupId)
        c.execute(sql)
        conn.commit()
    else:
        messagebox.showinfo("错误", "此IP+端口+topic已经存在")
    c.close()
    conn.close()


def reload_tree_data(tree):
    '''
    数据重载
    '''
    clear_tree(tree)
    data = readInit()
    if data is not None:
        for item in data:
            tu = []
            for it in item:
                if it is not None:
                    tu.append(it)
            tree.insert('', 'end', values=tu)


def clear_tree(tree):
    '''
    清空表格
    '''
    x = tree.get_children()
    for item in x:
        tree.delete(item)


class Toplevel1:

    def center_window(self, root, w, h):
        """
        窗口居于屏幕中央
        :param root: root
        :param w: 窗口宽度
        :param h: 窗口高度
        :return:
        """
        # 获取屏幕 宽、高
        ws = root.winfo_screenwidth()
        hs = root.winfo_screenheight()

        # 计算 x, y 位置
        x = (ws / 2) - (w / 2)
        y = (hs / 2) - (h / 2)

        root.geometry('%dx%d+%d+%d' % (w, h, x, y))

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        _entry_relx = 0.82
        _entry_width = 0.15
        self.save_check_button_var = tk.StringVar()
        self.save_check_button_var.set('F')
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        # top.geometry("275x244+367+109")
        self.center_window(top, 600, 400)

        top.title("kafka测试工具")
        top.configure(background="#d9d9d9")
        top.resizable(0, 0)  # 框体大小可调性，分别表示x,y方向的可变性

        self.tree = ttk.Treeview(root, columns=['1', '2', '3', '4'], show='headings', height=14)

        self.tree.column('1', width=100, anchor='center')
        self.tree.column('2', width=100, anchor='center')
        self.tree.column('3', width=100, anchor='center')
        self.tree.column('4', width=100, anchor='center')
        self.tree.heading('1', text='ip')
        self.tree.heading('2', text='port')
        self.tree.heading('3', text='topic')
        self.tree.heading('4', text='group_id')
        # 加载数据
        reload_tree_data(self.tree)
        self.tree.grid()

        # ----vertical scrollbar------------
        vbar = ttk.Scrollbar(root, orient=TK.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=vbar.set)
        self.tree.grid(row=0, column=0, sticky=TK.NSEW)
        vbar.grid(row=0, column=1, sticky=TK.NS)

        self.IP_Label = tk.Label(top)
        self.IP_Label.place(relx=0.77, rely=0.02, height=23, width=30)
        self.IP_Label.configure(background="#d9d9d9")
        self.IP_Label.configure(disabledforeground="#a3a3a3")
        self.IP_Label.configure(font="TkFixedFont")
        self.IP_Label.configure(foreground="#000000")
        self.IP_Label.configure(text='''IP:''')

        self.IP_Entry = tk.Entry(top)
        self.IP_Entry.place(relx=_entry_relx, rely=0.025, height=20, relwidth=_entry_width)
        self.IP_Entry.configure(background="white")
        self.IP_Entry.configure(disabledforeground="#a3a3a3")
        self.IP_Entry.configure(font="TkFixedFont")
        self.IP_Entry.configure(foreground="#000000")
        self.IP_Entry.configure(insertbackground="black")
        self.IP_Entry.configure(width=144)
        self.IP_Entry.insert(0, '127.0.0.1')

        self.Port_Label = tk.Label(top)
        self.Port_Label.place(relx=0.745, rely=0.12, height=23, width=45)
        self.Port_Label.configure(background="#d9d9d9")
        self.Port_Label.configure(disabledforeground="#a3a3a3")
        self.Port_Label.configure(font="TkFixedFont")
        self.Port_Label.configure(foreground="#000000")
        self.Port_Label.configure(text='''Port:''')

        self.Port_Entry = tk.Entry(top)
        self.Port_Entry.place(relx=_entry_relx, rely=0.125, height=20, relwidth=_entry_width)
        self.Port_Entry.configure(background="white")
        self.Port_Entry.configure(disabledforeground="#a3a3a3")
        self.Port_Entry.configure(font="TkFixedFont")
        self.Port_Entry.configure(foreground="#000000")
        self.Port_Entry.configure(insertbackground="black")
        self.Port_Entry.configure(width=144)
        self.Port_Entry.insert(0, '9092')

        self.Topic_Label = tk.Label(top)
        self.Topic_Label.place(relx=0.738, rely=0.22, height=23, width=45)
        self.Topic_Label.configure(background="#d9d9d9")
        self.Topic_Label.configure(disabledforeground="#a3a3a3")
        self.Topic_Label.configure(font="TkFixedFont")
        self.Topic_Label.configure(foreground="#000000")
        self.Topic_Label.configure(text='''Topic:''')

        self.Topic_Entry = tk.Entry(top)
        self.Topic_Entry.place(relx=_entry_relx, rely=0.225, height=20, relwidth=_entry_width)
        self.Topic_Entry.configure(background="white")
        self.Topic_Entry.configure(disabledforeground="#a3a3a3")
        self.Topic_Entry.configure(font="TkFixedFont")
        self.Topic_Entry.configure(foreground="#000000")
        self.Topic_Entry.configure(insertbackground="black")
        self.Topic_Entry.configure(width=144)
        self.Topic_Entry.insert(0, 'test')

        self.GroupId_Label = tk.Label(top)
        self.GroupId_Label.place(relx=0.715, rely=0.32, height=23, width=60)
        self.GroupId_Label.configure(background="#d9d9d9")
        self.GroupId_Label.configure(disabledforeground="#a3a3a3")
        self.GroupId_Label.configure(font="TkFixedFont")
        self.GroupId_Label.configure(foreground="#000000")
        self.GroupId_Label.configure(text='''GroupId:''')

        self.GroupId_Entry = tk.Entry(top)
        self.GroupId_Entry.place(relx=_entry_relx, rely=0.325, height=20, relwidth=_entry_width)
        self.GroupId_Entry.configure(background="white")
        self.GroupId_Entry.configure(disabledforeground="#a3a3a3")
        self.GroupId_Entry.configure(font="TkFixedFont")
        self.GroupId_Entry.configure(foreground="#000000")
        self.GroupId_Entry.configure(insertbackground="black")
        self.GroupId_Entry.configure(width=144)
        self.GroupId_Entry.insert(0, 'test')

        self.Save_Button = tk.Button(top)
        self.Save_Button.place(relx=0.72, rely=0.4, height=28, width=75)
        self.Save_Button.configure(activebackground="#ececec")
        self.Save_Button.configure(activeforeground="#000000")
        self.Save_Button.configure(background="#d9d9d9")
        # self.Button1.configure(cursor="fleur")
        self.Save_Button.configure(disabledforeground="#a3a3a3")
        self.Save_Button.configure(font="TkFixedFont")
        self.Save_Button.configure(foreground="#000000")
        self.Save_Button.configure(highlightbackground="#d9d9d9")
        self.Save_Button.configure(highlightcolor="black")
        self.Save_Button.configure(pady="0")
        self.Save_Button.configure(text='''<< 保存''')

        self.Delete_Button = tk.Button(top, command=lambda: delete())
        self.Delete_Button.place(relx=0.86, rely=0.4, height=28, width=75)
        self.Delete_Button.configure(activebackground="#ececec")
        self.Delete_Button.configure(activeforeground="#000000")
        self.Delete_Button.configure(background="#d9d9d9")
        # self.Button1.configure(cursor="fleur")
        self.Delete_Button.configure(disabledforeground="#a3a3a3")
        self.Delete_Button.configure(font="TkFixedFont")
        self.Delete_Button.configure(foreground="#000000")
        self.Delete_Button.configure(highlightbackground="#d9d9d9")
        self.Delete_Button.configure(highlightcolor="black")
        self.Delete_Button.configure(pady="0")
        self.Delete_Button.configure(text='''删除选中''')

        self.Run_Producer_Button = tk.Button(top)
        self.Run_Producer_Button.place(relx=0.72, rely=0.47, height=28, width=75)
        self.Run_Producer_Button.configure(activebackground="#ececec")
        self.Run_Producer_Button.configure(activeforeground="#000000")
        self.Run_Producer_Button.configure(background="#d9d9d9")
        self.Run_Producer_Button.configure(disabledforeground="#a3a3a3")
        self.Run_Producer_Button.configure(font="TkFixedFont")
        self.Run_Producer_Button.configure(foreground="#000000")
        self.Run_Producer_Button.configure(highlightbackground="#d9d9d9")
        self.Run_Producer_Button.configure(highlightcolor="black")
        self.Run_Producer_Button.configure(pady="0")
        self.Run_Producer_Button.configure(text='''发送消息''')

        self.Run_Consumer_Button = tk.Button(top, command=lambda: thread_it(receiveMsg))
        self.Run_Consumer_Button.place(relx=0.86, rely=0.47, height=28, width=75)
        self.Run_Consumer_Button.configure(activebackground="#ececec")
        self.Run_Consumer_Button.configure(activeforeground="#000000")
        self.Run_Consumer_Button.configure(background="#d9d9d9")
        # self.Button1.configure(cursor="fleur")
        self.Run_Consumer_Button.configure(disabledforeground="#a3a3a3")
        self.Run_Consumer_Button.configure(font="TkFixedFont")
        self.Run_Consumer_Button.configure(foreground="#000000")
        self.Run_Consumer_Button.configure(highlightbackground="#d9d9d9")
        self.Run_Consumer_Button.configure(highlightcolor="black")
        self.Run_Consumer_Button.configure(pady="0")
        self.Run_Consumer_Button.configure(text='''启动消费者''')

        self.Run_Refresh_Button = tk.Button(top, command=lambda: thread_it(reload_tree_data(self.tree)))
        self.Run_Refresh_Button.place(relx=0.72, rely=0.543, height=28, width=160)
        self.Run_Refresh_Button.configure(activebackground="#ececec")
        self.Run_Refresh_Button.configure(activeforeground="#000000")
        self.Run_Refresh_Button.configure(background="#d9d9d9")
        # self.Button1.configure(cursor="fleur")
        self.Run_Refresh_Button.configure(disabledforeground="#a3a3a3")
        self.Run_Refresh_Button.configure(font="TkFixedFont")
        self.Run_Refresh_Button.configure(foreground="#000000")
        self.Run_Refresh_Button.configure(highlightbackground="#d9d9d9")
        self.Run_Refresh_Button.configure(highlightcolor="black")
        self.Run_Refresh_Button.configure(pady="0")
        self.Run_Refresh_Button.configure(text='''列表刷新''')

        self.Read_History_Button = tk.Button(top)
        self.Read_History_Button.place(relx=0.698, rely=0.612, height=28, width=90)
        self.Read_History_Button.configure(activebackground="#ececec")
        self.Read_History_Button.configure(activeforeground="#000000")
        self.Read_History_Button.configure(background="#d9d9d9")
        # self.Button1.configure(cursor="fleur")
        self.Read_History_Button.configure(disabledforeground="#a3a3a3")
        self.Read_History_Button.configure(font="TkFixedFont")
        self.Read_History_Button.configure(foreground="#000000")
        self.Read_History_Button.configure(highlightbackground="#d9d9d9")
        self.Read_History_Button.configure(highlightcolor="black")
        self.Read_History_Button.configure(pady="0")
        self.Read_History_Button.configure(text='''查看历史数据''')

        self.Read_Save_Checkbutton = tk.Checkbutton(top, variable=self.save_check_button_var, onvalue="T", offvalue="F")
        self.Read_Save_Checkbutton.place(relx=0.85, rely=0.612, height=28, width=90)
        self.Read_Save_Checkbutton.configure(activebackground="#ececec")
        self.Read_Save_Checkbutton.configure(activeforeground="#000000")
        self.Read_Save_Checkbutton.configure(background="#d9d9d9")
        # self.Button1.configure(cursor="fleur")
        self.Read_Save_Checkbutton.configure(disabledforeground="#a3a3a3")
        self.Read_Save_Checkbutton.configure(font="TkFixedFont")
        self.Read_Save_Checkbutton.configure(foreground="#000000")
        self.Read_Save_Checkbutton.configure(highlightbackground="#d9d9d9")
        self.Read_Save_Checkbutton.configure(highlightcolor="black")
        self.Read_Save_Checkbutton.configure(pady="0")
        self.Read_Save_Checkbutton.configure(text='''存储消费''')

        self.Info_Text = tk.Text(top)  # 宽度为80个字母(40个汉字)，高度为1个行高
        self.Info_Text.place(relx=0, rely=0.69, height=100, width=595)

        self.GitHub_Label = tk.Label(top)
        self.GitHub_Label.place(relx=0, rely=0.94, height=23, width=500)
        self.GitHub_Label.configure(background="#d9d9d9")
        self.GitHub_Label.configure(disabledforeground="#a3a3a3")
        self.GitHub_Label.configure(font="TkFixedFont 10")
        self.GitHub_Label.configure(foreground="#000000")
        # self.GitHub_Label.configure(cursor="hand")
        self.GitHub_Label.configure(justify="left")
        self.GitHub_Label.configure(text='''GitHub地址（有最新版打包）: https://github.com/hanhuafeng/kafka_tools.git''')

        # scroll = TK.Scrollbar()
        # # 放到窗口的右侧, 填充Y竖直方向
        # # scroll.pack(side=TK.RIGHT, fill=TK.Y)
        # scroll.place(relx=1, rely=1)
        #
        # # 两个控件关联
        # scroll.config(command=self.Info_Text.yview)
        # self.Info_Text.config(yscrollcommand=scroll.set)

        def add(event):
            addNewDataInDb(self.IP_Entry.get(), self.Port_Entry.get(), self.Topic_Entry.get(), self.GroupId_Entry.get())
            reload_tree_data(self.tree)
            self.tree.see(self.tree.get_children()[len(self.tree.get_children()) - 1])

        def readTreeData(event):
            item = self.tree.selection()
            if item:
                item_text = self.tree.item(item, "values")
                index = 0
                for it in item_text:
                    if index == 0:
                        self.IP_Entry.delete(0, TK.END)
                        self.IP_Entry.insert(0, it)
                    elif index == 1:
                        self.Port_Entry.delete(0, TK.END)
                        self.Port_Entry.insert(0, it)
                    elif index == 2:
                        self.Topic_Entry.delete(0, TK.END)
                        self.Topic_Entry.insert(0, it)
                    elif index == 3:
                        self.GroupId_Entry.delete(0, TK.END)
                        self.GroupId_Entry.insert(0, it)
                    index += 1

        def sendMsg(event):
            if self.IP_Entry.get() is None or self.IP_Entry.get() == '' \
                    or self.Port_Entry.get() is None or self.Port_Entry.get() == '' \
                    or self.Topic_Entry.get() is None or self.Topic_Entry.get() == '' \
                    or self.Info_Text.get('0.0', 'end') is None or self.Info_Text.get('0.0', 'end').strip("\n") == '':
                messagebox.showinfo("错误", "有信息为空")
                return
            try:
                boot = self.IP_Entry.get() + ':' + self.Port_Entry.get()
                Producer(boot, self.Info_Text.get('0.0', 'end').strip("\n"), self.Topic_Entry.get())
                messagebox.showinfo("成功", "消息发送成功")
            except Exception as e:
                messagebox.showinfo("错误", "生产信息失败:" + str(e))

        def receiveMsg():
            global consummer
            if self.IP_Entry.get() is None or self.IP_Entry.get() == '' \
                    or self.Port_Entry.get() is None or self.Port_Entry.get() == '' \
                    or self.Topic_Entry.get() is None or self.Topic_Entry.get() == '' \
                    or self.GroupId_Entry.get() is None or self.GroupId_Entry.get().strip("\n") == '':
                messagebox.showinfo("错误", "有信息为空")
                return
            if self.Run_Consumer_Button['text'] == '启动消费者':
                self.Run_Producer_Button['state'] = 'disabled'
                self.Run_Consumer_Button['text'] = '停止消费者'
                try:
                    boot = self.IP_Entry.get() + ':' + self.Port_Entry.get()
                    consummer = Consummer(self.Info_Text, self.Topic_Entry.get(), self.GroupId_Entry.get(), boot,
                                          self.save_check_button_var)
                    messagebox.showinfo("成功", "启动成功")
                    consummer.start()
                except Exception as e:
                    messagebox.showinfo("错误", "消费信息失败:" + str(e))
                    self.Run_Producer_Button['state'] = 'normal'
                    self.Run_Consumer_Button['state'] = 'normal'
                    self.Run_Consumer_Button['text'] = '启动消费者'
            else:
                try:
                    self.Run_Producer_Button['state'] = 'normal'
                    self.Run_Consumer_Button['text'] = '启动消费者'
                    if consummer is not None:
                        consummer.close()
                    messagebox.showinfo("成功", "停止成功")
                except Exception as e:
                    messagebox.showinfo("错误", "停止失败,错误信息:" + str(e))

        def delete():
            item = self.tree.selection()
            if item:
                item_text = self.tree.item(item, "values")
                sql = 'delete from info where ip=\'{}\' and port=\'{}\' and topic=\'{}\''.format(item_text[0],
                                                                                                 item_text[1],
                                                                                                 item_text[2],
                                                                                                 item_text[3])
                conn = sqlite3.connect(os.path.join(os.path.dirname(sys.argv[0]), "kafka_info.db"))
                c = conn.cursor()
                c.execute(sql)
                conn.commit()
                c.close()
                conn.close()
                messagebox.showinfo("成功", "删除成功")
                reload_tree_data(self.tree)

        def open_in_browser(event):
            """
            从浏览器中打开指定网页
            :param
            :return:
            """
            webbrowser.open('https://github.com/hanhuafeng/kafka_tools.git')

        def movenIn(event):
            self.GitHub_Label.configure(font="TkFixedFont 10 underline")

        def movenOut(event):
            self.GitHub_Label.configure(font="TkFixedFont 10")

        def show_history_msg(event):
            """
            展示历史数据
            """
            item = self.tree.selection()
            if item:
                item_text = self.tree.item(item, "values")
                print(item_text)
                boot = item_text[0] + ':' + item_text[1]
                HistoryMsgFrame(boot)
            else:
                messagebox.showinfo("错误", "请选择一条数据")

        self.Save_Button.bind('<ButtonRelease-1>', add)  # 绑定添加事件===========
        self.GitHub_Label.bind('<ButtonRelease-1>', open_in_browser)  # 绑定添加事件===========
        self.GitHub_Label.bind('<Enter>', movenIn)  # 绑定添加事件===========
        self.GitHub_Label.bind('<Leave> ', movenOut)  # 绑定添加事件===========
        self.Run_Producer_Button.bind('<ButtonRelease-1>', sendMsg)  # 绑定添加事件===========
        self.Read_History_Button.bind('<ButtonRelease-1>', show_history_msg)  # 绑定添加事件===========
        self.tree.bind('<Double-1>', readTreeData)  # 表格绑定左键双击事件
        # self.Button1_5.bind('<ButtonRelease-1>', FindByTiaojian)  # 绑定单击离开事件===========


if __name__ == '__main__':
    vp_start_gui()
